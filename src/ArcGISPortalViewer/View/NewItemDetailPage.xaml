<common:LayoutAwarePage
    x:Name="pageRoot"
    x:Class="ArcGISPortalViewer.View.NewItemDetailPage"
    DataContext="{Binding PortalItemsCollection, Source={StaticResource Locator}}"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ArcGISPortalViewer.View"
    xmlns:common="using:ArcGISPortalViewer.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:Win8nl_Behavior="using:Win8nl.Behaviors"
    xmlns:WinRtBehaviors="using:WinRtBehaviors"
    mc:Ignorable="d">

    <Page.Resources>
        <common:HtmlToTextConverter x:Key="htmlToTextConverter" />
        <common:CollectionTypeConverter x:Key="collectionTypeConverter" />
        <!-- Collection of items displayed by this page -->
        <CollectionViewSource
            x:Name="itemsViewSource"
            Source="{Binding CurrentCollection, Mode=OneWay, Converter={StaticResource collectionTypeConverter}}"/>
    </Page.Resources>

    <!--
        This grid acts as a root panel for the page that defines two rows:
        * Row 0 contains the back button and page title
        * Row 1 contains the rest of the page layout
    -->
    <Grid Style="{StaticResource LayoutRootStyle}">
        <Grid.RowDefinitions>
            <RowDefinition Height="140"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--
            The remainder of the page is one large FlipView that displays details for
            one item at a time, allowing the user to flip through all items in the chosen
            group
        -->
        <FlipView
            x:Name="flipView"
            AutomationProperties.AutomationId="ItemsFlipView"
            AutomationProperties.Name="Item Details"
            TabIndex="1"
            Grid.RowSpan="2"
            ItemsSource="{Binding Source={StaticResource itemsViewSource}}" Margin="45,-33,-45,33">
            <WinRtBehaviors:Interaction.Behaviors>
                <!--<Win8nl_Behavior:EventToCommandBehavior Event="PointerPressed" Command="ItemClickCommand" PassEventArgsToCommand="True"
                                                        CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=Self}}"/>-->
                <Win8nl_Behavior:EventToCommandBehavior Event="SelectionChanged" Command="SelectionChangedCommand" PassEventArgsToCommand="True"/>
            </WinRtBehaviors:Interaction.Behaviors>
            <FlipView.ItemContainerStyle>
                <Style TargetType="FlipViewItem">
                    <Setter Property="Margin" Value="0,137,0,0"/>
                </Style>
            </FlipView.ItemContainerStyle>
 
            <FlipView.ItemTemplate>
                <DataTemplate>
                    <!--
                        UserControl chosen as the templated item because it supports visual state management
                        Loaded/unloaded events explicitly subscribe to view state updates from the page
                    -->
                    <UserControl Loaded="StartLayoutUpdates" Unloaded="StopLayoutUpdates">
                        <ScrollViewer x:Name="scrollViewer" Style="{StaticResource HorizontalScrollViewerStyle}" Grid.Row="1">

                            <!-- Content is allowed to flow across as many columns as needed -->
                            <common:RichTextColumns x:Name="richTextColumns" Margin="117,0,117,47">
                                <RichTextBlock x:Name="richTextBlock" Width="560" Style="{StaticResource ItemRichTextStyle}" IsTextSelectionEnabled="False">
                                    <Paragraph>
                                        <Run FontSize="26.667" FontWeight="Light" Text="{Binding Title}"/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <Run FontWeight="Normal" Text="{Binding Snippet}"/>
                                    </Paragraph>
                                    <Paragraph LineStackingStrategy="MaxHeight">
                                        <InlineUIContainer>
                                            <Image x:Name="image" MaxHeight="480" Margin="0,20,0,10" Stretch="Uniform" Source="{Binding ThumbnailUri}" AutomationProperties.Name="{Binding Title}"/>
                                        </InlineUIContainer>
                                    </Paragraph>
                                    <Paragraph FontWeight="SemiLight" common:HtmlToTextConverter.HtmlToInlines="{Binding Description}">
                                        <!--<Run FontWeight="SemiLight" Text="{Binding Description}"/>-->
                                    </Paragraph>
                                </RichTextBlock>

                                <!-- Additional columns are created from this template -->
                                <common:RichTextColumns.ColumnTemplate>
                                    <DataTemplate>
                                        <RichTextBlockOverflow Width="560" Margin="80,0,0,0">
                                            <RichTextBlockOverflow.RenderTransform>
                                                <TranslateTransform X="-1" Y="4"/>
                                            </RichTextBlockOverflow.RenderTransform>
                                        </RichTextBlockOverflow>
                                    </DataTemplate>
                                </common:RichTextColumns.ColumnTemplate>
                            </common:RichTextColumns>

                            <VisualStateManager.VisualStateGroups>

                                <!-- Visual states reflect the application's view state inside the FlipView -->
                                <VisualStateGroup x:Name="ApplicationViewStates">
                                    <VisualState x:Name="FullScreenLandscape"/>
                                    <VisualState x:Name="Filled"/>

                                    <!-- Respect the narrower 100-pixel margin convention for portrait -->
                                    <VisualState x:Name="FullScreenPortrait">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="richTextColumns" Storyboard.TargetProperty="Margin">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="97,0,87,57"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="image" Storyboard.TargetProperty="MaxHeight">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="400"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>

                                    <!-- When snapped, the content is reformatted and scrolls vertically -->
                                    <VisualState x:Name="Snapped">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="richTextColumns" Storyboard.TargetProperty="Margin">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="17,0,17,57"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="scrollViewer" Storyboard.TargetProperty="Style">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VerticalScrollViewerStyle}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="richTextBlock" Storyboard.TargetProperty="Width">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="280"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="image" Storyboard.TargetProperty="MaxHeight">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="160"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </ScrollViewer>
                    </UserControl>
                </DataTemplate>
            </FlipView.ItemTemplate>
        </FlipView>

        <!-- Back button and page title -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="backButton" Click="GoBack" IsEnabled="{Binding Frame.CanGoBack, ElementName=pageRoot}" Style="{StaticResource BackButtonStyle}"/>
            <TextBlock x:Name="pageTitle" Text="{Binding CollectionTitle}" Style="{StaticResource PageHeaderTextStyle}" Grid.Column="1" IsHitTestVisible="false"/>
        </Grid>

        <VisualStateManager.VisualStateGroups>

            <!-- Visual states reflect the application's view state -->
            <VisualStateGroup x:Name="ApplicationViewStates">
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>

                <!-- The back button respects the narrower 100-pixel margin convention for portrait -->
                <VisualState x:Name="FullScreenPortrait">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PortraitBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>

                <!-- The back button and title have different styles when snapped -->
                <VisualState x:Name="Snapped">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="pageTitle" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedPageHeaderTextStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
    <common:LayoutAwarePage.BottomAppBar>
        <AppBar x:Name="appBar" Height="88" Background="{StaticResource ApplicationPageBackgroundThemeBrush}">
            <Grid  DataContext="{Binding AppVM, Source={StaticResource Locator}}">
                <Grid.Resources>
                    <common:TypeToVisibilityConverter x:Key="typeToVisibilityConverter"  />
                    <!--<common:FavoritesVisibilityConverter x:Key="favoritesConverter" />-->
                    <common:BooleanToVisibilityConverter x:Key="bool2Visibility"/>
                    <!--<Style x:Key="PinAppBarButtonStyle" TargetType="Button" BasedOn="{StaticResource AppBarButtonStyle}">
                        <Setter Property="AutomationProperties.AutomationId" Value="PinAppBarButton"/>
                        <Setter Property="AutomationProperties.Name" Value="Pin to Start"/>
                        <Setter Property="Content" Value="&#xE141;"/>
                    </Style>-->
                    <common:TrueFalseConverter x:Key="trueFalseConverter" />
                    <common:NullToVisibilityConverter x:Key="nullToVisibilityConverter" />
                </Grid.Resources>
                <StackPanel Margin="0,0,30,0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="{Binding CurrentAppViewModel.SelectedPortalItem, Converter={StaticResource nullToVisibilityConverter}, ConverterParameter=reverse}">
                    <Button Style="{StaticResource MapAppBarButtonStyle}" Command="{Binding CurrentAppViewModel.OpenMapCommand, Mode=OneWay}" CommandParameter="{Binding CurrentAppViewModel.SelectedPortalItem}" />
                    <Button Style="{StaticResource FavoriteAppBarButtonStyle}" Visibility="{Binding CurrentAppViewModel.IsSelectedItemInFavorites, Mode=TwoWay, Converter={StaticResource bool2Visibility}, ConverterParameter=reverse}" Command="{Binding CurrentAppViewModel.AddToFavoritesCommand, Mode=OneWay}" AutomationProperties.Name="Add Favorite" />
                    <Button Style="{StaticResource RemoveFavoriteAppBarButtonStyle}" Visibility="{Binding CurrentAppViewModel.IsSelectedItemInFavorites, Mode=TwoWay, Converter={StaticResource bool2Visibility}}" Command="{Binding CurrentAppViewModel.RemoveFromFavoritesCommand, Mode=OneWay}" />
                </StackPanel>
                <StackPanel x:Name="appBarPanel" Margin="0,0,30,0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Right">
                    <Button Style="{StaticResource PinAppBarButtonStyle}" AutomationProperties.Name="Pin to Start"
                            IsEnabled="{Binding CurrentAppViewModel.IsPinningTile, Converter={StaticResource trueFalseConverter}, ConverterParameter=false}" 
                            Visibility="{Binding CurrentAppViewModel.SelectedPortalItem, Converter={StaticResource nullToVisibilityConverter}, ConverterParameter=reverse}"
                            Command="{Binding CurrentAppViewModel.PinToStartCommand, Mode=OneWay}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" />
                </StackPanel>
            </Grid>
        </AppBar>
    </common:LayoutAwarePage.BottomAppBar>
</common:LayoutAwarePage>
